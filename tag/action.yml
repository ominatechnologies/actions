name: Test merge and tag
description: checkout, check changelog, setup python, pip install, pre-commit, flake8, mypy, pytest, tag, trigger other repos

inputs:
  token:
    description: git pat to execute git related commands
    required: true
  python:
    description: python version to use
    required: true
    default: "3.9"
  install:
    description: locations to pip install
    required: true
    default: .
  mypy:
    description: path for mypy
    required: false
  wait:
    description: wait for ports to be available
    required: false
  triggers:
    description: internal repos to trigger (comma separated)
    required: false
  python-envs:
    description: python related environments
    required: false
  pytest-envs:
    description: pytest related environments
    required: false
    default: |
      PYTHONHASHSEED=0
      PYTHONUNBUFFERED=0
  test-mode:
    description: to test the workflow
    required: false

runs:
  using: composite
  steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ inputs.token }}
    - name: git cred
      shell: bash
      run: git config --global url.https://${{ inputs.token }}@github.com/.insteadOf ssh://git@github.com/
    - uses: actions/setup-python@v3
      with:
        python-version: ${{ inputs.python }}
        cache: pip
    - name: Setup python related environment variables
      if: inputs.python-envs
      shell: bash
      run: echo "${{ inputs.python-envs }}" | sed 's#pythonLocation#${{ env.pythonLocation }}#g' >> $GITHUB_ENV
    - name: Install tools and requirements
      shell: bash
      run: |
        pip install -U pip setuptools wheel pre-commit bumpver
        pip install -r requirements.dev.txt ${{ inputs.install }}
    - uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: ${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
    - name: Run pre-commit
      shell: bash
      run: pre-commit run --all-files
    - name: Run mypy
      if: inputs.mypy
      shell: bash
      run: mypy ${{ inputs.mypy }}
    - name: Wait for ports to be available
      if: inputs.wait
      shell: bash
      run: |
        IFS=', ' read -r -a array <<< "${{ inputs.wait }}"
        for element in "${array[@]}"
        do
          while ! nc -z localhost $element; do sleep 3; done
        done
    - name: Set default env vars for pytest
      if: inputs.pytest-envs
      shell: bash
      run: echo "${{ inputs.pytest-envs }}" >> $GITHUB_ENV
    - name: Run pytest
      shell: bash
      run: pytest
    - name: push new tag
      shell: bash
      run: |
        # Git config
        git config user.name "GitHub Actions"
        git config user.email "scott.tiger@ominatechnologies.com"

        # Latest change
        git fetch -a
        git reset --hard origin/main

        # Tag and its message
        bumpver update -n
        tag=$(git show -s --format=%s | cut -c 16-)
        echo "CURRENT_VERSION=$tag" >> $GITHUB_ENV
        changes=$(sed -n '/^++++$/,/^++++++++/p' CHANGELOG.rst | sed '1d;$d' | sed '$d')
        message=$(echo -e "\n$changes")

        # Finalize changelog
        sed -i "s/^++++$/++++\n\n$tag\n$(printf '+%.0s' $(seq 2 $(echo $tag | wc -c | tr -d ' ')))/" CHANGELOG.rst

        # Commit changes
        git add CHANGELOG.rst
        git commit --amend --no-edit

        # Tag the commit
        git tag -a "$tag" -m "$message"
    - name:  Register skip from event
      if: contains(github.event.pull_request.title, '[no tag]') || contains(github.event.pull_request.title, '[skip tag]')
      shell: bash
      run: |
        echo TEST_MODE
        echo "TEST_MODE=true" >> $GITHUB_ENV
    - name:  Register skip from input
      if: inputs.test-mode
      shell: bash
      run: |
        echo TEST_MODE
        echo "TEST_MODE=true" >> $GITHUB_ENV
    - name:  Push commit and tag
      if: ${{ ! env.TEST_MODE }}
      shell: bash
      run: git push --atomic origin main "${{ env.CURRENT_VERSION }}"
    - name: Set output for triggers
      id: triggers
      if: inputs.triggers && ! env.TEST_MODE
      shell: bash
      run: |
        IFS=', ' read -r -a array <<< "${{ inputs.triggers }}"
        echo "::set-output name=first::${array[0]}"
        echo "::set-output name=second::${array[1]}" || echo ''
    - uses: convictional/trigger-workflow-and-wait@v1.5.0
      if: inputs.triggers && steps.triggers.outputs.first
      with:
        owner: ominatechnologies
        repo: ${{ steps.triggers.outputs.first }}
        github_token: ${{ inputs.token }}
        workflow_file_name: bump.yml
        wait_workflow: false
        inputs: '{"branch_name": "${{ github.head_ref }}", "tag": "${{ env.CURRENT_VERSION }}", "sender": "${{ github.event.repository.name }}"}'
    - uses: convictional/trigger-workflow-and-wait@v1.5.0
      if: inputs.triggers && steps.triggers.outputs.second
      with:
        owner: ominatechnologies
        repo: ${{ steps.triggers.outputs.second }}
        github_token: ${{ inputs.token }}
        workflow_file_name: bump.yml
        wait_workflow: false
        inputs: '{"branch_name": "${{ github.head_ref }}", "tag": "${{ env.CURRENT_VERSION }}", "sender": "${{ github.event.repository.name }}"}'
